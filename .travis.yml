language: shell

git:
  depth: false

# mono:
#  - latest

matrix:
  include:

#  - name: Linux PowerPC 64 (mono)
#    os: linux
#    dist: xenial
#    env:
#    - MULTIARCH_IMAGE="multiarch/debian-debootstrap:ppc64el-stretch"
#    services:
#        - docker

  - name: Linux ARM-64 (.net core & mono)
    os: linux
    dist: xenial
    env:
    - MULTIARCH_IMAGE="multiarch/debian-debootstrap:arm64-stretch"
    services:
        - docker

  - name: Linux ARM-v7 (mono)
    os: linux
    dist: xenial
    env:
    - MULTIARCH_IMAGE="multiarch/debian-debootstrap:armhf-buster"
    services:
        - docker

  - name: OS X 10.14 (.net core & mono)
    os: osx
    osx_image: xcode10.2

  - name: Linux i386 (mono)
    os: linux
    dist: xenial
    env:
    - MULTIARCH_IMAGE="multiarch/debian-debootstrap:i386-stretch"
    services:
        - docker

  - name: OS X 10.10 (mono)
    os: osx
    osx_image: xcode6.4

#  - name: OS X 10.12
#    os: osx
#    osx_image: xcode8.3
#  - name: OS X 10.13
#    os: osx
#    osx_image: xcode9.3

# https://docs.travis-ci.com/user/caching/
before_script:
- 'printenv | sort'
- |
    OS_X_VER=$(sw_vers 2>/dev/null | grep BuildVer | awk '{print $2}' | cut -c1-2); OS_X_VER=$((OS_X_VER-4))

- |
  DOTNET_Url=https://dot.net/v1/dotnet-install.sh; 
  if [[ "$TRAVIS_OS_NAME" == "linux" || $OS_X_VER -ge 13 ]]; then
      time (curl -ksSL $DOTNET_Url | bash /dev/stdin -c 2.2 -i ~/.dotnet)
      time (curl -ksSL $DOTNET_Url | bash /dev/stdin -c 3.0 -i ~/.dotnet)
      export PATH="$HOME/.dotnet:$PATH"
      export DOTNET_ROOT="$HOME/.dotnet"
      dotnet tool install -g BenchmarkDotNet.Tool
      export PATH="$HOME/.dotnet/tools:$PATH"
      dotnet --info || true
  fi

- | 
  MONO_Url=https://download.mono-project.com/archive/6.4.0/macos-10-universal/MonoFramework-MDK-6.4.0.198.macos10.xamarin.universal.pkg
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      curl -o ~/mono.pkg $MONO_Url
      sudo installer -verbose -pkg ~/mono.pkg -target /
      export PATH="/Library/Frameworks/Mono.framework/Versions/Current/Commands:$PATH"
  fi

- 'mono --version; msbuild /version; echo ""; nuget 2>&1 | head -4'
  
script:
- export DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0
- export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1; export DOTNET_CLI_TELEMETRY_OPTOUT=1;
- export CI=false
- dotnet restore --disable-parallel || true
- nuget restore -verbosity quiet || true

- '[ $OS_X_VER -ge 13 ] && (sudo dotnet test -f netcoreapp3.0 -c Release | cat) || true'
- '[ $OS_X_VER -ge 13 ] && (time sudo bash benchmark.linux.sh || true;) || true'
- |
  if false && [[ -n "$MULTIARCH_IMAGE" ]]; then
    # LEGACY
    set -e
    docker run --rm --privileged multiarch/qemu-user-static:register --reset
    docker run -d --name tests -t "${MULTIARCH_IMAGE}" bash -c 'sleep 424242'
    pushd Tests4Multiarch 
    docker cp * tests:/
    docker exec tests bash /install-mono.sh
    docker exec tests bash -ec 'work=$HOME/build/devizer; rm -rf $work; mkdir -p $work; cd $work; git clone https://github.com/devizer/Universe.CpuUsage; cd Universe.CpuUsage; cd Tests4Mac; bash -e test-using-mono-only.sh'

    popd

  elif [[ -n "$MULTIARCH_IMAGE" ]]; then
    set -e

    echo "Installing mono LOCALLY"
    source Tests4Multiarch/install-mono.sh

    docker run --rm --privileged multiarch/qemu-user-static:register --reset
    docker run -d --name tests -t "${MULTIARCH_IMAGE}" bash -c 'sleep 424242'

    echo "Installing mono in the QEMU"
    docker cp Tests4Multiarch/install-mono.sh tests:/
    docker exec tests bash /install-mono.sh

    echo "RUN TESTS in the qemu"
    cd Tests4Mac
    source build-the-matrix.sh; echo $matrix_run
    pushd $matrix
    docker exec tests mkdir -p $matrix
    docker cp ./. tests:$(pwd)
    sudo docker exec tests bash -ec "$matrix_run"

  else
    # MAC OS (check renice without sudo)
    pushd Tests4Mac; bash -e test-using-mono-only.sh; popd
  fi
    
