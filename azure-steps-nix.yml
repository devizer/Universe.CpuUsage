# AGENT_OS=Linux|Darwin|Windows_NT
# condition: eq(variables['Agent.OS'], 'Linux|Darwin|Windows_NT')

steps:
#  - task: SonarCloudPrepare@1
#    inputs:
#      SonarCloud: '66420b06-0308-4157-9b80-ef53c71c6596'
#      organization: 'devizer'
#      projectKey: 'cov-demo'
#      projectName: 'Coverage Demo'
#      extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverage/coverage.opencover.xml'

  - bash: |
      sudo rm -f /usr/local/bin/Say || true
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      Say --Reset-Stopwatch
      [ "$(uname -s)" == "Darwin" ] && Say "kern.boottime: $(sysctl -n kern.boottime)"
      echo "AGENT_OS: '${AGENT_OS}'"
      if [[ "$(uname -s)" == Darwin ]]; then
        Say "Installing coreutils on OSX"
        time brew install coreutils; 
      fi
      Say "uname -s: '$(uname -s)'"
      Say "uname -m: '$(uname -m)'"
      Say "PATH    : '$PATH'"
      dotnet --info
      # export TMPDIR=$HOME/.tmp-dotnet; mkdir -p $TMPDIR
      DOTNET_TARGET_DIR=/usr/share/dotnet
      if [[ "$(uname -s)" != "Linux" ]]; then DOTNET_TARGET_DIR=$HOME/.dotnet; fi
      export DOTNET_VERSIONS="3.1 5.0"
      export DOTNET_TARGET_DIR
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      sudo ln -s -f $DOTNET_TARGET_DIR/dotnet /usr/local/bin/dotnet || true
      dotnet --info
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    failOnStderr: false
    displayName: 'Install dotnet sdk 3.1 on linux/osx'

  - powershell: |
       $ErrorActionPreference = "SilentlyContinue"
       & uname -a
       & dotnet --info
       & mono --version
       & nvm --version
       & node --version
       & npm --version
       & yarn --version
       "PATH: [" + [Environment]::GetEnvironmentVariable("PATH") + "]"
       & bash -c "Say ENVIRONMENT; printenv | sort"; 
       $true
    failOnStderr: false
    displayName: 'system info (pwsh)'

  - script: |
      uname -a
      if [[ -s /etc/debian_version ]]; then
        . /etc/os-release
        Say "OS: $PRETTY_NAME v$(cat /etc/debian_version)"
      fi;
      dotnet --info
      Say "mono: $(mono --version)"
      Say "nvm: $(nvm --version)"
      Say "node: $(node --version)"
      Say "npm: $(npm --version)"
      Say "yarn: $(yarn --version)"
      echo "PATH: [$PATH]"
      Say "/etc/environment"
      cat /etc/environment
      Say "env"
      printenv | sort
      Say "git config"
      git config -l
    condition: eq(variables['OS'], 'Linux')
    displayName: 'system info (bash)'

  - script: |
      time list-packages
    condition: eq(variables['OS'], 'Linux')
    displayName: 'List Packages'

  - script: |
      # export VSS_NUGET_EXTERNAL_FEED_ENDPOINTS='{"endpointCredentials": [{"endpoint":"https://devizer.pkgs.visualstudio.com/_packaging/devizer.nuget/nuget/v3/index.json", "username":"optional", "password":"'$MY_AZ_APIKEY'"}]}'
      # echo "VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: [$VSS_NUGET_EXTERNAL_FEED_ENDPOINTS]"
      # echo "##vso[task.setvariable variable=VSS_NUGET_EXTERNAL_FEED_ENDPOINTS]VSS_NUGET_EXTERNAL_FEED_ENDPOINTS"
      dotnet restore || (Say "Fallback to singlethreaded restore"; dotnet restore --disable-parallel)
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    displayName: 'dotnet restore'
    env:
      MY_AZ_APIKEY: $(AZ_API_KEY)

  - script: |
      # export VSS_NUGET_EXTERNAL_FEED_ENDPOINTS='{"endpointCredentials": [{"endpoint":"https://devizer.pkgs.visualstudio.com/_packaging/devizer.nuget/nuget/v3/index.json", "username":"optional", "password":"'$MY_AZ_APIKEY'"}]}'
      # echo "VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: [$VSS_NUGET_EXTERNAL_FEED_ENDPOINTS]"
      # echo "##vso[task.setvariable variable=VSS_NUGET_EXTERNAL_FEED_ENDPOINTS]VSS_NUGET_EXTERNAL_FEED_ENDPOINTS"
      dotnet restore || dotnet restore --disable-parallel
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'dotnet restore'
    env:
      MY_AZ_APIKEY: $(AZ_API_KEY)

  - script: |
      echo "CoverletOutput=[$(Build.SourcesDirectory)/coverage/]"
      export VSS_NUGET_EXTERNAL_FEED_ENDPOINTS='{"endpointCredentials": [{"endpoint":"https://devizer.pkgs.visualstudio.com/_packaging/devizer.nuget/nuget/v3/index.json", "username":"optional", "password":"'$MY_AZ_APIKEY'"}]}'
      rem dotnet test --no-restore --logger trx -f netcoreapp2.2 -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/
      REM dotnet test --no-restore --logger trx -f netcoreapp3.1 -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/ --collect:"XPlat Code Coverage"
      dotnet test  --collect:"XPlat Code Coverage" --logger trx -f netcoreapp3.1 -c Release
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'dotnet test on Windows'
    env:
      MY_AZ_APIKEY: $(AZ_API_KEY)

  - script: |
      rem $(testProject) 2>/dev/null || true
      set -e
      export VSS_NUGET_EXTERNAL_FEED_ENDPOINTS='{"endpointCredentials": [{"endpoint":"https://devizer.pkgs.visualstudio.com/_packaging/devizer.nuget/nuget/v3/index.json", "username":"optional", "password":"'$MY_AZ_APIKEY'"}]}'
      echo "Bash version: $BASH_VERSION"
      echo "CoverletOutput=[$(Build.SourcesDirectory)/coverage/]"
      echo "uname -s: [$(uname -s)]"
      source FULL-TIME-REPORT.sh

      function _install_prev_sdk_() {
        DOTNET_Url=https://dot.net/v1/dotnet-install.sh; 
        try-and-retry curl -o /tmp/_dotnet-install.sh -ksSL $DOTNET_Url
        time try-and-retry timeout 666 sudo -E bash /tmp/_dotnet-install.sh -version 3.1.120 -i $HOME/dotnet-3.1-builder
        export PATH="$HOME/dotnet-3.1-builder:$PATH"
        dotnet --info
        unset MSBuildSDKsPath || true
      }; _install_prev_sdk_
      
      set +e
      Say "hmm1"
      is_qemu="$(sudo grep -rnw /sys/devices/platform -e QEMU 2>/dev/null)"
      Say "hmm2"
      if [[ "$is_qemu" == *"QEMU"* ]] || [[ -d /sys/firmware/qemu_fw_cfg ]]; then
        export CpuUsagePrecisionForAssert=0.2
        Say "Overridden CpuUsagePrecisionForAssert: $CpuUsagePrecisionForAssert"
      fi
      set -e

      Say "hmm3"
      TIME="$FULL_TIME" time dotnet test --collect:"XPlat Code Coverage" --logger trx -f netcoreapp3.1 -c Release 
      # /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    displayName: 'dotnet test on Linux/OSX'
    env:
      MY_AZ_APIKEY: $(AZ_API_KEY)

  - script: |
      printenv | sort
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      Show-System-Stat || true
      echo ""
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    displayName: 'System Stat'


#  - script: |
#      dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
#      ./reportgenerator "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
#    condition: eq( variables['Agent.OS'], 'Linux' )
#    displayName: Run Reportgenerator on Linux

#  - script: |
#      dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
#      .\reportgenerator.exe "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
#    condition: eq( variables['Agent.OS'], 'Windows_NT' )
#    displayName: Run Reportgenerator on Windows

#  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
#    displayName: 'Run Code Analysis'

#  - task: SonarCloudPublish@1
#    displayName: 'Publish Quality Gate Results'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'
      #pathToSources: # Optional
      #reportDirectory: # Optional
      #additionalCodeCoverageFiles: # Optional
      
  - powershell: |
      $currentVersion=Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion'
      $win_10_release_id = $currentVersion.ReleaseId; if (! $win_10_release_id) { $win_10_release_id = $currentVersion.CurrentBuildNumber }
      $win_name = $(Get-WMIObject win32_operatingsystem -EA SilentlyContinue).Caption
      echo "$($win_name): Release [$win_10_release_id], powershell [$($PSVersionTable.PSVersion)]" | tee "System Info.log"
      $cpu=Get-WmiObject Win32_Processor; 
      echo "CPU: $($cpu.Name), $([System.Environment]::ProcessorCount) Cores" | tee "System Info.log" -Append

      get-wmiobject win32_product | 
        sort -Property Vendor, Name, Version | 
        ft Version, Name, Vendor, InstallState, IdentifyingNumber -AutoSize | 
        Out-File -Width 512 "Preintalled Software.log"

      $true
    condition: eq(variables['OS'], 'Windows') 
    displayName: 'About Windows'



  #  - task: PublishCodeCoverageResults@1
#    inputs:
#      summaryFileLocation: $(Build.SourcesDirectory)/coverage/Cobertura/Cobertura.xml
#      reportDirectory: $(Build.SourcesDirectory)/coverage/Cobertura
#      codecoverageTool: cobertura

#  - task: DotNetCoreCLI@2
#    inputs:
#      command: publish
#      arguments: '-f netcoreapp2.2 --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#      projects: $(solution)
#      publishWebProjects: false
#      modifyOutputPath: true
#      zipAfterPublish: true

#  - task: PublishBuildArtifacts@1
#    inputs:
#      # pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#      pathtoPublish: '$(build.repository.localpath)'
#      artifactName: '$(imageName)-Full'
#
#  - task: PublishBuildArtifacts@1

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)'
      artifactName: '$(Agent.JobName)-$(Build.BuildNumber)'
      
  - bash: |
      pushd Universe.CpuUsage/bin/Release
      ls -la Universe.CpuUsage.1.42.0.nupkg
      echo 'iex "& { $(irm https://aka.ms/install-artifacts-credprovider.ps1) }"' | pwsh
      # https://github.com/Microsoft/artifacts-credprovider/blob/master/README.md#environment-variables
      export VSS_NUGET_EXTERNAL_FEED_ENDPOINTS='{"endpointCredentials": [{"endpoint":"https://devizer.pkgs.visualstudio.com/_packaging/devizer.nuget/nuget/v3/index.json", "username":"optional", "password":"'$MY_AZ_APIKEY'"}]}'
      Say "VSS_NUGET_EXTERNAL_FEED_ENDPOINTS" ${VSS_NUGET_EXTERNAL_FEED_ENDPOINTS}"
      dotnet nuget push --source "devizer.nuget" --api-key az Universe.CpuUsage.*.nupkg
      popd
    displayName: 'push local nuget'
    condition: eq(variables.when, 'Never') 
    env:
      MY_AZ_APIKEY: $(AZ_APIKEY)
