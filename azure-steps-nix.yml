
steps:
#  - task: SonarCloudPrepare@1
#    inputs:
#      SonarCloud: '66420b06-0308-4157-9b80-ef53c71c6596'
#      organization: 'wulfland-github'
#      projectKey: 'cov-demo'
#      projectName: 'Coverage Demo'
#      extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverage/coverage.opencover.xml'

  - bash: |
      echo "uname -s: $(uname -s)"
      dotnet --info
      dir=/usr/share/dotnet; if [[ "$(uname -s)" != "Linux" ]]; then dir=$HOME/.dotnet; fi
      echo 2.2 to $dir
      curl -sSL https://dot.net/v1/dotnet-install.sh | sudo bash /dev/stdin -c 2.2 -i $dir
      echo 3.0 to $dir
      curl -sSL https://dot.net/v1/dotnet-install.sh | sudo bash /dev/stdin -c 3.0 -i $dir
      echo 3.1 to $dir
      curl -sSL https://dot.net/v1/dotnet-install.sh | sudo bash /dev/stdin -c 3.1 -i $dir
      sudo ln -f -s $dir/dotnet /usr/local/bin/dotnet
      dotnet --info
    displayName: 'Install dotnet sdk 3.1 on linux/osx'

  - powershell: |
       $ErrorActionPreference = "SilentlyContinue"
       & uname -a
       & dotnet --info
       & mono --version
       $true
    displayName: 'system info'

  #- script: dotnet build $(solution) --configuration $(buildConfiguration)
  #  displayName: 'dotnet build $(buildConfiguration)'

  - script: |
      rem $(testProject) 2>/dev/null || true
      dotnet test --logger trx -f netcoreapp2.2 -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/ 
    displayName: 'dotnet test'

  - script: |
      printenv | sort
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      Show-System-Stat || true
      echo ""
    displayName: 'System Stat'

  #  - script: |
#      dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
#      ./reportgenerator "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
#    condition: eq( variables['Agent.OS'], 'Linux' )
#    displayName: Run Reportgenerator on Linux
#
#  - script: |
#      dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
#      .\reportgenerator.exe "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
#    condition: eq( variables['Agent.OS'], 'Windows_NT' )
#    displayName: Run Reportgenerator on Windows

#  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
#    displayName: 'Run Code Analysis'

#  - task: SonarCloudPublish@1
#    displayName: 'Publish Quality Gate Results'

  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

#  - task: PublishCodeCoverageResults@1
#    inputs:
#      summaryFileLocation: $(Build.SourcesDirectory)/coverage/Cobertura/Cobertura.xml
#      reportDirectory: $(Build.SourcesDirectory)/coverage/Cobertura
#      codecoverageTool: cobertura

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      arguments: '-f netcoreapp2.2 --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      projects: $(solution)
      publishWebProjects: false
      modifyOutputPath: true
      zipAfterPublish: true

  - task: PublishBuildArtifacts@1
    inputs:
      # pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      pathtoPublish: '$(build.repository.localpath)'
      artifactName: '$(imageName)-Full'

  - task: PublishBuildArtifacts@1
