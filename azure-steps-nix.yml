# AGENT_OS=Linux|Darwin|Windows_NT

steps:
#  - task: SonarCloudPrepare@1
#    inputs:
#      SonarCloud: '66420b06-0308-4157-9b80-ef53c71c6596'
#      organization: 'wulfland-github'
#      projectKey: 'cov-demo'
#      projectName: 'Coverage Demo'
#      extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverage/coverage.opencover.xml'

  - bash: |
      echo "AGENT_OS: '${AGENT_OS}'"
      echo "uname -s: '$(uname -s)'"
      echo "uname -m: '$(uname -m)'"
      echo "PATH    : '$PATH'"
      dotnet --info
      export TMPDIR=$HOME/.tmp-dotnet; mkdir -p $TMPDIR
      curl -L https://dot.net/v1/dotnet-install.sh -o $TMPDIR/dotnet-install.sh
      chmod +x $TMPDIR/dotnet-install.sh
      dir=/usr/share/dotnet; if [[ "$(uname -s)" != "Linux" ]]; then dir=$HOME/.dotnet; fi
      echo Installing .NET Core 2.2 to $dir
      sudo bash -c "export TMPDIR=$TMPDIR; $TMPDIR/dotnet-install.sh -c 2.2 -i $dir"
      # PREV: curl -sSL https://dot.net/v1/dotnet-install.sh | sudo bash /dev/stdin -c 2.2 -i $dir
      echo Installing .NET Core 3.0 to $dir
      sudo bash -c "export TMPDIR=$TMPDIR; $TMPDIR/dotnet-install.sh -c 3.0 -i $dir"
      echo Installing .NET Core 3.1 to $dir
      sudo bash -c "export TMPDIR=$TMPDIR; $TMPDIR/dotnet-install.sh -c 3.1 -i $dir"
      sudo ln -f -s $dir/dotnet /usr/local/bin/dotnet
      dotnet --info
    displayName: 'Install dotnet sdk 3.1 on linux/osx'

  - powershell: |
       $ErrorActionPreference = "SilentlyContinue"
       & uname -a
       & dotnet --info
       & mono --version
       $true
    displayName: 'system info'

  - script: |
      dotnet restore || dotnet restore --disable-parallel
      echo 
    displayName: 'dotnet restore'

  - script: |
      echo "CoverletOutput=[$(Build.SourcesDirectory)/coverage/]"
      rem dotnet test --logger trx -f netcoreapp2.2 -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/
      dotnet test --logger trx -f netcoreapp2.2 -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/ --collect:"XPlat Code Coverage"
    condition: eq(variables['OS'], 'Windows')
    displayName: 'dotnet test on Windows'

  - script: |
      rem $(testProject) 2>/dev/null || true
      echo "Bash version: $BASH_VERSION"
      echo "CoverletOutput=[$(Build.SourcesDirectory)/coverage/]"
      echo "uname -s: [$(uname -s)]"
      source FULL-TIME-REPORT.sh
      TIME="$FULL_TIME" time dotnet test  --collect:"XPlat Code Coverage" --logger trx -f netcoreapp2.2 -c Release 
      # /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/
    condition: ne(variables['OS'], 'Windows')
    displayName: 'dotnet test on Linux/OSX'

  - script: |
      printenv | sort
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      Show-System-Stat || true
      echo ""
    displayName: 'System Stat'


#  - script: |
#      dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
#      ./reportgenerator "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
#    condition: eq( variables['Agent.OS'], 'Linux' )
#    displayName: Run Reportgenerator on Linux
#
#  - script: |
#      dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
#      .\reportgenerator.exe "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
#    condition: eq( variables['Agent.OS'], 'Windows_NT' )
#    displayName: Run Reportgenerator on Windows

#  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
#    displayName: 'Run Code Analysis'

#  - task: SonarCloudPublish@1
#    displayName: 'Publish Quality Gate Results'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/coverage.cobertura.xml'
      #pathToSources: # Optional
      #reportDirectory: # Optional
      #additionalCodeCoverageFiles: # Optional
      
  - powershell: |
      $currentVersion=Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion'
      $win_10_release_id = $currentVersion.ReleaseId; if (! $win_10_release_id) { $win_10_release_id = $currentVersion.CurrentBuildNumber }
      $win_name = $(Get-WMIObject win32_operatingsystem -EA SilentlyContinue).Caption
      echo "$($win_name): Release [$win_10_release_id], powershell [$($PSVersionTable.PSVersion)]" | tee "System Info.log"
      $cpu=Get-WmiObject Win32_Processor; 
      echo "CPU: $($cpu.Name), $([System.Environment]::ProcessorCount) Cores" | tee "System Info.log" -Append

      get-wmiobject win32_product | 
        sort -Property Vendor, Name, Version | 
        ft Version, Name, Vendor, InstallState, IdentifyingNumber -AutoSize | 
        Out-File -Width 512 "Preintalled Software.log"

      $true
    condition: eq(variables['OS'], 'Windows')
    displayName: 'About Windows'



  #  - task: PublishCodeCoverageResults@1
#    inputs:
#      summaryFileLocation: $(Build.SourcesDirectory)/coverage/Cobertura/Cobertura.xml
#      reportDirectory: $(Build.SourcesDirectory)/coverage/Cobertura
#      codecoverageTool: cobertura

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      arguments: '-f netcoreapp2.2 --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      projects: $(solution)
      publishWebProjects: false
      modifyOutputPath: true
      zipAfterPublish: true

#  - task: PublishBuildArtifacts@1
#    inputs:
#      # pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#      pathtoPublish: '$(build.repository.localpath)'
#      artifactName: '$(imageName)-Full'
#
#  - task: PublishBuildArtifacts@1

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)'
      artifactName: '$(Agent.JobName)-$(Build.BuildNumber)'
      
